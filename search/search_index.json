{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cornmaze The primary source of truth for all our repositories. This means that: - Cornmaze should not reference any other repository. - We store our libraries and scripts over here. - Some documentation regarding everyone is best viewed here. Important links Documentation page Project page Specific sections inside the documentation page: Onboarding guide Contributing to README.md Do not edit ./README.md ! Instead, edit ./docs/docs/index.md . After editing that file, run go run dev/sync_readme/main.go from the root folder / . That should automatically transform all the relative references.","title":"Home"},{"location":"#cornmaze","text":"The primary source of truth for all our repositories. This means that: - Cornmaze should not reference any other repository. - We store our libraries and scripts over here. - Some documentation regarding everyone is best viewed here.","title":"Cornmaze"},{"location":"#important-links","text":"Documentation page Project page Specific sections inside the documentation page: Onboarding guide","title":"Important links"},{"location":"#contributing-to-readmemd","text":"Do not edit ./README.md ! Instead, edit ./docs/docs/index.md . After editing that file, run go run dev/sync_readme/main.go from the root folder / . That should automatically transform all the relative references.","title":"Contributing to README.md"},{"location":"code_standards/","text":"Code standards Project values For deciding the rules laid out below, and possibly when should we break those rules, we have these values to follow for our pet projects: Fun: My primary goal is to have fun. Everything else is superseded. I should always ask myself if I'm having fun and what's stopping me from having fun. Delight: I want to make my life easier as a developer or an artist. I want to skip to the fun part. I should use the tools that will help me or make those tools whenever I can. Empathy: I pretend another developer will eventually use or look at what I\u2019m making. This sounds weird but I find myself having less empathy on myself, but I highly value people working with me. If I'm struggling to value myself, then maybe if I pretend to treat myself to be as another person, then maybe I can show myself more empathy too. Transparency: Share and document the successes and failures. Oh, the mortifying ordeal of being known... Focus: This one was not even a value. It was originally \"avoid premature micro-optimization\" because I overthink too much. I need to focus on what makes me happy, and that's expressing myself through games and whatever project I want to make. Forgiveness: Self-improvement is okay, but don\u2019t be too critical and know you did your best at the time. It's something I've been learning these last few months, and maybe this year and the next year is meant to forgive myself for my shortcomings. Accept who I am. Be thankful of all the moments I tried my best, whether I failed or succeeded. Context I've been reflecting about my pet projects that have either never been started or have never been finished. I'm currently reviewing my self. Things have not been going well. And on a related note, what made most of these projects just kinda not go well. These projects were meant to be fun, but they now scare me... So, I wrote down what I think went wrong, and what I could do better in the future. What did not go well? I overthink about the solutions. They're supposed to be hobbies but I'm always finding a way to turn them into the constant self-improvement that just disheartens me at the end of the day. I don't reward myself and would often punish myself for not being on par with what I want. I want to change the framework of my mindset. Not that I have a specific goal, but I was thinking about what values should I uphold, so I could get back to having fun with my hobbies. I've kinda set myself some values that I want to remind myself. Maybe I'll formulate something more specific out of this. Logging rules We came up with these rules to help debugging but also avoid clutter and info leaking to the public. Always use WrapErrorWithDetails at the deepest level of your code. If you got an error from a code you called yourself, reconsider wrapping the error with this. If you want to wrap an error, use our custom ErrorWrapper . It's okay to log on every level of the stack using LogDetailedError . Do not show the client the errors as it is! Use ErrorWrapper.UserMessage ! Go imports Follow this structure: import ( // system \"context\" \"errors\" \"net/http\" // external \"github.com/twitchtv/twirp\" \"golang.org/x/crypto/bcrypt\" // internal remote: use go get \"github.com/TurnipXenon/turnip_api/rpc/turnip\" // internal local \"github.com/TurnipXenon/Turnip/internal/server\" \"github.com/TurnipXenon/Turnip/internal/util\" \"github.com/TurnipXenon/Turnip/pkg/models\" ) Contribution Merging to main is simple, just make a PR. To merge to build/production, create a new branch called main-to-build-production based on main, then rebase build/production on it. After that, squash merge. React code block ordering constants useState-like hooks useEffects const functions render guards conditional renders return render","title":"Code standards"},{"location":"code_standards/#code-standards","text":"","title":"Code standards"},{"location":"code_standards/#project-values","text":"For deciding the rules laid out below, and possibly when should we break those rules, we have these values to follow for our pet projects: Fun: My primary goal is to have fun. Everything else is superseded. I should always ask myself if I'm having fun and what's stopping me from having fun. Delight: I want to make my life easier as a developer or an artist. I want to skip to the fun part. I should use the tools that will help me or make those tools whenever I can. Empathy: I pretend another developer will eventually use or look at what I\u2019m making. This sounds weird but I find myself having less empathy on myself, but I highly value people working with me. If I'm struggling to value myself, then maybe if I pretend to treat myself to be as another person, then maybe I can show myself more empathy too. Transparency: Share and document the successes and failures. Oh, the mortifying ordeal of being known... Focus: This one was not even a value. It was originally \"avoid premature micro-optimization\" because I overthink too much. I need to focus on what makes me happy, and that's expressing myself through games and whatever project I want to make. Forgiveness: Self-improvement is okay, but don\u2019t be too critical and know you did your best at the time. It's something I've been learning these last few months, and maybe this year and the next year is meant to forgive myself for my shortcomings. Accept who I am. Be thankful of all the moments I tried my best, whether I failed or succeeded.","title":"Project values"},{"location":"code_standards/#context","text":"I've been reflecting about my pet projects that have either never been started or have never been finished. I'm currently reviewing my self. Things have not been going well. And on a related note, what made most of these projects just kinda not go well. These projects were meant to be fun, but they now scare me... So, I wrote down what I think went wrong, and what I could do better in the future. What did not go well? I overthink about the solutions. They're supposed to be hobbies but I'm always finding a way to turn them into the constant self-improvement that just disheartens me at the end of the day. I don't reward myself and would often punish myself for not being on par with what I want. I want to change the framework of my mindset. Not that I have a specific goal, but I was thinking about what values should I uphold, so I could get back to having fun with my hobbies. I've kinda set myself some values that I want to remind myself. Maybe I'll formulate something more specific out of this.","title":"Context"},{"location":"code_standards/#logging-rules","text":"We came up with these rules to help debugging but also avoid clutter and info leaking to the public. Always use WrapErrorWithDetails at the deepest level of your code. If you got an error from a code you called yourself, reconsider wrapping the error with this. If you want to wrap an error, use our custom ErrorWrapper . It's okay to log on every level of the stack using LogDetailedError . Do not show the client the errors as it is! Use ErrorWrapper.UserMessage !","title":"Logging rules"},{"location":"code_standards/#go-imports","text":"Follow this structure: import ( // system \"context\" \"errors\" \"net/http\" // external \"github.com/twitchtv/twirp\" \"golang.org/x/crypto/bcrypt\" // internal remote: use go get \"github.com/TurnipXenon/turnip_api/rpc/turnip\" // internal local \"github.com/TurnipXenon/Turnip/internal/server\" \"github.com/TurnipXenon/Turnip/internal/util\" \"github.com/TurnipXenon/Turnip/pkg/models\" )","title":"Go imports"},{"location":"code_standards/#contribution","text":"Merging to main is simple, just make a PR. To merge to build/production, create a new branch called main-to-build-production based on main, then rebase build/production on it. After that, squash merge.","title":"Contribution"},{"location":"code_standards/#react-code-block-ordering","text":"constants useState-like hooks useEffects const functions render guards conditional renders return render","title":"React code block ordering"},{"location":"infrastructure/","text":"Infrastructure We put our general notes about infrastructure here! Plan: We can write the ARN for our github to get our code and then give it to the pipeline Plan: We use Github Actions on branches \"build/*\" build/production build/staging1 We deploy in those branches. What we need to do: We wanna make a Github Action Current plan: delay pipelines; prioritize deployment Flow for deploying Turnip: Manual: https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html docker push account-id.dkr.ecr.us-east-2.amazonaws.com/turnip Github: push to build/production Plan: We just want to use DigitalOcean. We are no longer having fun. Changes: No more AWS No more CDK This would archive turnip_cdk and revert reinhard to empty (for now). We might want to use Pulumi in the future. Roadmap: Deploy the Go backend on DigitalOcean Migrate to Postgresql Get back to NextJS","title":"Infrastructure"},{"location":"infrastructure/#infrastructure","text":"We put our general notes about infrastructure here! Plan: We can write the ARN for our github to get our code and then give it to the pipeline Plan: We use Github Actions on branches \"build/*\" build/production build/staging1 We deploy in those branches. What we need to do: We wanna make a Github Action Current plan: delay pipelines; prioritize deployment Flow for deploying Turnip: Manual: https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html docker push account-id.dkr.ecr.us-east-2.amazonaws.com/turnip Github: push to build/production Plan: We just want to use DigitalOcean. We are no longer having fun. Changes: No more AWS No more CDK This would archive turnip_cdk and revert reinhard to empty (for now). We might want to use Pulumi in the future. Roadmap: Deploy the Go backend on DigitalOcean Migrate to Postgresql Get back to NextJS","title":"Infrastructure"},{"location":"interacting_with_cornmaze/","text":"Interacting with cornmaze Syncing index.md and README.md Setup : You need Go >=1.17 installed. Run go install github.com/TurnipXenon/cornmaze/dev/sync_readme Command Run go run github.com/TurnipXenon/cornmaze/dev/sync_readme Special repositories These repositories don't sync well with our template repository. We need to plan a way to sync their docs at some point: cornmaze potato turnip turnip_api","title":"Interacting with cornmaze"},{"location":"interacting_with_cornmaze/#interacting-with-cornmaze","text":"","title":"Interacting with cornmaze"},{"location":"interacting_with_cornmaze/#syncing-indexmd-and-readmemd","text":"Setup : You need Go >=1.17 installed. Run go install github.com/TurnipXenon/cornmaze/dev/sync_readme Command Run go run github.com/TurnipXenon/cornmaze/dev/sync_readme","title":"Syncing index.md and README.md"},{"location":"interacting_with_cornmaze/#special-repositories","text":"These repositories don't sync well with our template repository. We need to plan a way to sync their docs at some point: cornmaze potato turnip turnip_api","title":"Special repositories"},{"location":"onboarding/","text":"Onboarding Setup You just need go 1.17, and you should be run all the scripts here. MKDocs You don't really need to run through this to make edits to MKDocs, but if you want to see the layout and what it looks like served, check this guide. This assumes that you have Python installed locally. MKDocs: Setup pip install mkdocs MKDocs: Commands When entering these commands, go to /docs instead of being in the project's root folder / . mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. MKDocs: Ideal workflow Make changes See changes made using mkdocs serve If you edited index.md, run go run dev/sync_mkdocs_readme.go from the root folder / .","title":"Onboarding"},{"location":"onboarding/#onboarding","text":"","title":"Onboarding"},{"location":"onboarding/#setup","text":"You just need go 1.17, and you should be run all the scripts here.","title":"Setup"},{"location":"onboarding/#mkdocs","text":"You don't really need to run through this to make edits to MKDocs, but if you want to see the layout and what it looks like served, check this guide. This assumes that you have Python installed locally.","title":"MKDocs"},{"location":"onboarding/#mkdocs-setup","text":"pip install mkdocs","title":"MKDocs: Setup"},{"location":"onboarding/#mkdocs-commands","text":"When entering these commands, go to /docs instead of being in the project's root folder / . mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"MKDocs: Commands"},{"location":"onboarding/#mkdocs-ideal-workflow","text":"Make changes See changes made using mkdocs serve If you edited index.md, run go run dev/sync_mkdocs_readme.go from the root folder / .","title":"MKDocs: Ideal workflow"},{"location":"private_workflow/","text":"Private workflow Personal notes about how to keep certain parts of the code and content hidden. We want to be transparent as much as we want, but we also want to keep certain things private. Mostly due to personal preferences. We have two ways to keep things from leaking: Databases Private branches Private branch We work on four main branches: origin/main origin/wip private/main origin/wip The branches interact like this: time/steps -> local/wip *----------------*-- 1 \\ 7 / origin/main --*-------*-*--*---- 2 \\ ~4 / 5 \\ local/wip ----*---*-----*----- 3 \\ / /6\\ private/main ------*-----*------- Steps: We make a PR to origin, and merge our changes from WIP to origin/main. We pull changes from origin/main to local/wip. We make sure we have the latest changes from private. We then make our private changes, make a PR to private and merge them to private/main. Step 4 is special because we have to run a script which scrubs the private information from our templates. We squash our commits to hide these changes. We make a PR and merge to origin/main. For step 5, we delete local/wip, and make a new local/wip. We merge origin/main to local/wip and handle merge conflicts. We merge these resolved conflicts to private/main. Merge the latest changes from origin/main to local/wip. We continue working on our local/wip. Future plan We want this repository to be a plugin to the actual code we have.","title":"Private workflow"},{"location":"private_workflow/#private-workflow","text":"Personal notes about how to keep certain parts of the code and content hidden. We want to be transparent as much as we want, but we also want to keep certain things private. Mostly due to personal preferences. We have two ways to keep things from leaking: Databases Private branches","title":"Private workflow"},{"location":"private_workflow/#private-branch","text":"We work on four main branches: origin/main origin/wip private/main origin/wip The branches interact like this: time/steps -> local/wip *----------------*-- 1 \\ 7 / origin/main --*-------*-*--*---- 2 \\ ~4 / 5 \\ local/wip ----*---*-----*----- 3 \\ / /6\\ private/main ------*-----*------- Steps: We make a PR to origin, and merge our changes from WIP to origin/main. We pull changes from origin/main to local/wip. We make sure we have the latest changes from private. We then make our private changes, make a PR to private and merge them to private/main. Step 4 is special because we have to run a script which scrubs the private information from our templates. We squash our commits to hide these changes. We make a PR and merge to origin/main. For step 5, we delete local/wip, and make a new local/wip. We merge origin/main to local/wip and handle merge conflicts. We merge these resolved conflicts to private/main. Merge the latest changes from origin/main to local/wip. We continue working on our local/wip.","title":"Private branch"},{"location":"private_workflow/#future-plan","text":"We want this repository to be a plugin to the actual code we have.","title":"Future plan"}]}